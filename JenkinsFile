pipeline {
  agent {
    docker {
      // Use a base Docker image for Jenkins builds
      image 'python:3.9-slim' 
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
    }
  }

  environment {
    SONAR_URL = "http://192.168.44.213:9000" // SonarQube instance URL
    DOCKER_REGISTRY = "docker.io" // Docker registry (default is DockerHub)
    DOCKER_CREDENTIALS = 'docker-cred' // Jenkins credentials ID for DockerHub
    GITHUB_REPO = 'Course_Tracker_' // GitHub repository name
    GITHUB_USER = 'Shesh009' // GitHub username
    SONAR_AUTH_TOKEN = credentials('sonarqube') // Jenkins credentials for SonarQube token
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          sh '''
            echo "Checking out the Flask application repository"
            git clone https://github.com/Shesh009/Course_Tracker_.git .
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        sh '''
          echo "Installing dependencies for the Flask app"
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        script {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
              echo "Running SonarQube analysis for the Flask app"
              sonar-scanner -Dsonar.projectKey=course-tracker -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
            '''
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "sheshu009/ct-app:${BUILD_NUMBER}" // Docker image tag based on Jenkins build number
      }
      steps {
        script {
          sh '''
            echo "Building the Docker image for the Flask app"
            docker build -t ${DOCKER_IMAGE} .

            echo "Pushing the Docker image to DockerHub"
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleaning up after build'
      cleanWs() // Clean up workspace after the build
    }
  }
}
