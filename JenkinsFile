pipeline {
    agent {
        docker {
            image 'sheshu009/python-flask-sonarqube:latest'
            args '--user root --volume /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONAR_URL = credentials('sonar_url')
        DOCKER_REGISTRY = "docker.io"
        DOCKER_CREDENTIALS = 'docker-cred'
        GITHUB_REPO = 'Course_Tracker_'
        GITHUB_USER = 'Shesh009'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
        ENV = credentials('env')
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                sh 'echo "${ENV}" > .env'
                sh 'cat .env'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                  pip install --no-cache-dir -r requirements.txt
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                      sonar-scanner \
                      -Dsonar.login=$SONAR_AUTH_TOKEN \
                      -Dsonar.host.url=${SONAR_URL} \
                      -Dsonar.projectKey=Course-Tracker \
                      -Dsonar.projectVersion=v${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Fetch SonarQube Report') {
            environment {
                REPORT_FILE = "sonar-report.json"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        echo "Fetching SonarQube analysis report..."

                        curl -u ${SONAR_AUTH_TOKEN}: \
                        "${SONAR_URL}/api/measures/component_tree?component=Course-Tracker&metricKeys=ncloc,complexity,violations" \
                        -o ${REPORT_FILE}

                        cat ${REPORT_FILE}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sheshu009/course-tracker:v${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh '''
                      echo "Building the Docker image for the Flask app"
                      cd /app
                      docker build --build-arg ENV_FILE=.env -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Course_Tracker_"
                GIT_USER_NAME = "Shesh009"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config --global user.email "sheshusheshu035@gmail.com"
                        git config --global user.name "Sheshu Akula"

                        git config --global --add safe.directory /var/lib/jenkins/workspace/Course-Tracker-Pipeline

                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" manifests/deployment.yaml

                        git add manifests/deployment.yaml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
